1. 
The correct mathematical result is a 64-bit unsigned number, which overflows in a 64-bit 2’s complement system. 

The instruction:
  => 0x541efa <arith_driver+506>: lea    0x0(,%rbx,4),%rax
executes when rbx=0xb38e48c71bd31c6f, so multiplication by 4 will cause overflow.

2. 
2305843009213693951 is 0x1FFFFFFFFFFFFFFF in hex, which is the largest value a Lisp integer can hold. 

The following instructions in data.c defines this number:
  DEFVAR_LISP ("most-positive-fixnum", Vmost_positive_fixnum,
    doc: /* The largest value that is representable in a Lisp integer.  */);
  Vmost_positive_fixnum = make_number (MOST_POSITIVE_FIXNUM);

From the instruction in lisp.h:
  #define MOST_POSITIVE_FIXNUM (EMACS_INT_MAX >> INTTYPEBITS)
where INTTYPEBITS==2, we can see that the first 2 bits in a 64-bit sequence are for type specification, so the max representable number is EMACS_INT_MAX >> 2, which is equal to 0x1FFFFFFFFFFFFFFF.

3.
The correct mathematical result of (* most-positive-fixnum most-positive-fixnum) should be 0x3C000000000000001, which overflows by 2 bits.

In data.c:
	case Amult:
          if (INT_MULTIPLY_OVERFLOW (accum, next))
            {
              EMACS_UINT a = accum, b = next, ab = a * b;
              overflow = 1;
              accum = ab & INTMASK;
            }
          else
            accum *= next;

The codes above deals with multiplication overflow using accum = ab & INTMASK, where INTMASK is defined in lisp.h to be 0x0FFFFFFFFFFFFFFF:
  #define INTMASK (EMACS_INT_MAX >> (INTTYPEBITS - 1))

Thus, 0x0x3C000000000000001 & 0x0FFFFFFFFFFFFFFF == 0x1 is the output.

4.
With -fsanitize=undefined, when there is overflow, the program will output a run-time error and then abort without giving a result.

5.
With -fwrapv, we won’t get a correct answer either since the program discards any bits exceeding the 64th bit and outputs an answer based on the modified bits.

6.
Use cqto to store one operand in rdx:rax, then multiply it with another operand and store the result in rdx:rax.

7.
-fwrapv directly discards all the exceeding bits, so it avoids a lot of overflow checks and management and significantly improves the execution efficiency.
